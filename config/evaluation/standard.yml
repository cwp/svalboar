metrics:
  # layout metrics

  # Specified symbols shall be located within the leftmost "n" columns of the left hand
  shortcut_keys:
    enabled: false
    weight: 0.35
    normalization:
      type: fixed
      value: 1.0
    params:
      # symbols that shall be considered "shortcut keys"
      shortcut_chars: cvx
      cost: 1.0
      within_n_leftmost_cols: 5

  # Pairs of keys that shall be placed in related positions to each other
  similar_letters:
    enabled: false
    weight: 3.0
    normalization:
      type: fixed
      value: 1.0
    params:
      letter_pairs_ratings:
        # The cost for not complying with any of the criteria is 1.0
        - same_key_cost: 0.0
          neighboring_cost: 0.0
          same_column_cost: 0.0
          symmetric_cost: 0.4
          letter_pairs:
            # List of pairs of letters that shall be placed in related positions to each other
            # Diacritics
            - ["a", "ä"]
            - ["o", "ö"]
            - ["u", "ü"]

  # Symbols of specified groups shall have the same relative location to each others.
  # Used to be called `asymmetric_keys`.
  similar_letter_groups:
    enabled: false
    weight: 10.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # List of pairs of symbol groups for which the keys shall have the same relative position
      # e.g. ["auo", "äüö"] means that the relative location of a -> ä shall be identical to u -> ü
      # and o -> ö. Otherwise, a cost is counted.
      letter_group_pairs:
        - ["auo", "äüö"]

  # unigram metrics

  # Each finger's load shall be relative to the specified weights
  finger_balance:
    enabled: true
    weight: 50.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # Intended factors for finger load. Thumb values are ignored.
      intended_loads:
        [Left, Pinky]: 1.2
        [Left, Ring]: 1.4
        [Left, Middle]: 2.0
        [Left, Index]: 2.0
        [Left, Thumb]: 2.0
        [Right, Thumb]: 2.0
        [Right, Index]: 2.0
        [Right, Middle]: 2.0
        [Right, Ring]: 1.4
        [Right, Pinky]: 1.2

  # Each hand's load shall be close to 50%
  hand_disbalance:
    enabled: true
    weight: 100.0
    normalization:
      type: fixed
      value: 1.0
    params:
      null: null

  # Each keystroke incurs a cost (defined in the keyboard's layout config)
  key_costs:
    enabled: true
    weight: 60.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # Informational metric computing loads per row
  row_loads:
    enabled: true
    weight: 0.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  modifier_usage:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      hold_cost: 1.0
      one_shot_cost: 0.0
      long_press_cost: 1.0

  # bigram metrics

  # If the keys corresponding to a bigram are not symmetrical on left and right hand, a cost is
  # counted.
  symmetric_handswitches:
    enabled: false
    weight: 1.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # Traditional finger repeats for conventional keyboards
  # Uses simple multiplicative cost model with finger-specific factors
  std_finger_repeats:
    enabled: true
    weight: 1500.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Reduce cost for index finger repeats (usually easier)
      index_finger_factor: 0.8
      # Increase cost for pinky finger repeats (usually harder)
      pinky_finger_factor: 1.4
      # Factor for unbalancing keys (keys that move hand off home row)
      unbalancing_factor: 2.0

  # Svalboard-specific finger repeats - disabled for traditional keyboards
  sval_finger_repeats:
    enabled: false
    weight: 1500.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      finger_factors:
        Thumb: 1.2
        Index: 0.8
        Middle: 1.0
        Ring: 1.1
        Pinky: 1.4

  # Svalboard-specific metric - disabled for traditional keyboards
  scissoring:
    enabled: false
    weight: 4000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # Put costs on some key combinations that are hard to describe otherwise
  manual_bigram_penalty:
    enabled: false
    weight: 2100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # if mirrored bigrams to the ones in "matrix_positions" below shall be added automatically
      add_mirrored: true

      # key positions as matrix positions and the corresponding costs
      # the format is [column, row]
      # [from_position, to_position]: weight
      matrix_positions:
        # Traditional keyboard awkward combinations
        [[3, 1], [2, 3]]: 1 # Example: difficult reaches
        [[3, 2], [2, 3]]: 0.3
        [[4, 2], [3, 3]]: 0.2

  # Traditional movement pattern for conventional keyboards
  std_movement_pattern:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # from: Finger for first symbol of the bigram
      # to: Finger for second symbol of the bigram
      # cost: Cost to count for such a movement
      finger_switch_factor:
        - { from: Pinky, to: Ring, cost: 2 }
        - { from: Pinky, to: Middle, cost: 3 }
        - { from: Pinky, to: Index, cost: 1.5 }

        - { from: Ring, to: Pinky, cost: 3 }
        - { from: Ring, to: Middle, cost: 0.3 }
        - { from: Ring, to: Index, cost: 0.4 }

        - { from: Middle, to: Pinky, cost: 1.5 }
        - { from: Middle, to: Ring, cost: 1.0 }
        - { from: Middle, to: Index, cost: 0.2 }

        - { from: Index, to: Pinky, cost: 0.1 }
        - { from: Index, to: Ring, cost: 0.2 }
        - { from: Index, to: Middle, cost: 0.5 }

      # Finger lengths for traditional keyboards
      finger_lengths:
        Left:
          Pinky: 1
          Ring: 2
          Middle: 3
          Index: 2
        Right:
          Pinky: 1
          Ring: 2
          Middle: 3
          Index: 2

      # Traditional movement factors
      short_down_to_long_or_long_up_to_short_factor: 1.5
      same_row_offset: 0.2
      unbalancing_factor: 1.5
      lateral_stretch_factor: 0.5

  # Svalboard movement pattern - disabled for traditional keyboards
  sval_movement_pattern:
    enabled: false
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      finger_switch_factor:
        - { from: Pinky, to: Ring, cost: 4 }
        - { from: Pinky, to: Middle, cost: 4 }
        - { from: Pinky, to: Index, cost: 2 }
        - { from: Ring, to: Pinky, cost: 6 }
        - { from: Ring, to: Middle, cost: 0.5 }
        - { from: Ring, to: Index, cost: 0.5 }
        - { from: Middle, to: Pinky, cost: 2 }
        - { from: Middle, to: Ring, cost: 2 }
        - { from: Middle, to: Index, cost: 0.2 }
        - { from: Index, to: Pinky, cost: 0.1 }
        - { from: Index, to: Ring, cost: 0.3 }
        - { from: Index, to: Middle, cost: 0.9 }

  # Traditional keyboards don't have specific unbalancing key patterns like Svalboard
  no_handswitch_after_unbalancing_key:
    enabled: false
    weight: 36.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # trigram metrics

  # The `irregularity` metric evaluates all bigram metrics that can be computed on individual
  # bigrams (in particular not the finger- and hand-balance metrics) for the first and second half
  # of each trigram. Their cost is multiplied and the square root of the resulting sum is taken.
  irregularity:
    enabled: true
    weight: 8.25
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # If there is no handswitch in a trigram, a cost is counted. The cost is multiplied by factors
  # depending on whether the three keys corresponding to the trigram are "in line" ("rolling
  # movement") or if there is a directional change.
  no_handswitch_in_trigram:
    enabled: true
    weight: 200.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Count this factor if there is a direction change in the trigram
      factor_with_direction_change: 2.0
      # Count this factor if there is no direction change in the trigram
      factor_without_direction_change: 1.0
      # Count this factor if all characters of the trigram lie on the same key
      factor_same_key: 0.0
      # Count this factor if the trigram contains at least finger repeats
      factor_contains_finger_repeat: 2.0
      # Count this factor if the starting and end key are the same (but no finger repeat)
      factor_same_key_start_end: 0.5
      # The trigram contains the index finger at least once
      factor_contains_index: 0.5

  # The `secondary_bigrams` metric evaluates all bigram metrics that can be computed on individual
  # bigrams for the bigram resulting from the first and last symbol of the trigram.
  secondary_bigrams:
    enabled: false
    weight: 0.1
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply the cost with this factor if no handswitch occurs in the trigram
      factor_no_handswitch: 0.7
      # Multiply the cost with this factor if a handswitch occurs in the trigram
      factor_handswitch: 0.8
      # Mental pauses:
      # Exclude the trirgrams which contain a mental pause and a follow up with a non-pause symbol.
      initial_pause_indicators: [",", "."]

  # If all keys corresponding to a trigram are hit by the same finger (and are all unequal), a cost
  # is counted. A factor is multiplied for each bigram with keys belonging to different columns.
  trigram_finger_repeats:
    enabled: false
    weight: 10000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply by this factor for each of the bigrams that have a lateral movement
      factor_lateral_movement: 1.2

  # Traditional roll metrics - less relevant for traditional keyboards than Svalboard
  trigram_rolls:
    enabled: false
    weight: 25000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      factor_inward: 1.0
      factor_outward: 0.2
      exclude_rows: [3]

  # Oxey metrics - disabled for traditional evaluation
  oxey_inward_rolls:
    enabled: false
    weight: -2.0
    normalization:
      type: weight_all
      value: 0.01
    params:
      exclude_thumbs: true
      exclude_modifiers: true
      exclude_chars: ["\n"]

  oxey_outward_rolls:
    enabled: false
    weight: -1.0
    normalization:
      type: weight_all
      value: 0.01
    params:
      exclude_thumbs: true
      exclude_modifiers: true
      exclude_chars: ["\n"]

ngrams:
  # Increase the weight of bigrams that have both an absolute weight and relative weight exceed
  # specified thresholds.
  increase_common_ngrams:
    enabled: false
    # Bigrams with a relative weight exceeding this threshold are considered
    critical_fraction: 0.001
    # The weight for bigrams exceeding both thresholds is multiplied by this factor
    factor: 2.0
    # Bigrams with an absolute weight exceeding this threshold are considered
    total_weight_threshold: 20.0

ngram_mapper:
  # Exclude ngrams that contain a line break, followed by a non-line-break character.
  # This encodes a mental pause which usually comes after hitting the "Enter" key, before
  # continuing to write.
  exclude_line_breaks: true

  # Split symbols belonging to higher layers of the layout into combinations involving modifiers
  # required to activate the layer
  split_modifiers:
    enabled: false
    # Multiply the ngram's weight with this factor whenever the resulting ngram involves two
    # modifiers that are required for the same symbol
    same_key_mod_factor: 0.03125

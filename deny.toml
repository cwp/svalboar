# cargo-deny configuration for Svalboar
# This file configures cargo-deny to check for security vulnerabilities,
# license compatibility, and dependency issues.

[graph]
# If 1 or more target filters are specified, only the packages matching
# one or more of those filters will be included in the output
targets = [
  # The triple can be any string, but only the target triples built by
  # rustc are guaranteed to work. You can see the list of supported
  # targets by running `rustc --print target-list`
  "x86_64-unknown-linux-gnu",
  "x86_64-pc-windows-msvc",
  "x86_64-apple-darwin",
  "aarch64-apple-darwin",
  "wasm32-unknown-unknown",
]

# The output table provides options for how/if diagnostics are outputted
[output]
# When outputting inclusion graphs in diagnostics that include features, this
# option can be used to specify the depth at which feature edges will be added.
# This option is included since the graphs can be quite large and the addition
# of features from the crate(s) to all of the graph roots can be far too verbose.
# This option can be overridden via `--feature-depth` on the cmd line
feature-depth = 1

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
  #"RUSTSEC-0000-0000",
]

[licenses]
# The confidence threshold for detecting a license from a license text.
# 0.8 means we need to be 80% confident that the detected license is correct
confidence-threshold = 0.8
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
  "MIT",
  "Apache-2.0",
  "Apache-2.0 WITH LLVM-exception",
  "BSD-2-Clause",
  "BSD-3-Clause",
  "ISC",
  "Unicode-DFS-2016",
  "CC0-1.0",
  "GPL-3.0-or-later",               # Our project license
  "LGPL-2.1-or-later",
  "LGPL-3.0-or-later",
  "MPL-2.0",
]
# List of explicitly disallowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
deny = ["GPL-2.0", "GPL-3.0", "AGPL-1.0", "AGPL-3.0"]
# Lint level for when multiple versions of the same license are detected
copyleft = "warn"
# The confidence threshold for detecting a license from a license text.
# 0.8 means we need to be 80% confident that the detected license is correct
default = "deny"
# The lint level used when no license is detected
unlicensed = "deny"
# Override the license for a crate when it's not detected correctly
[[licenses.clarify]]
name = "ring"
# SPDX identifier for the license
expression = "MIT AND ISC AND OpenSSL"
# One or more files in the crate's source used as the "source of truth" for
# the license expression. If the files are missing, or do not contain the
# expected license text, the clarification will fail
license-files = ["LICENSE"]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * all - all edges are highlighted
# * first-party-only - only edges to/from first-party crates are highlighted
# * none - no edges are highlighted
highlight = "all"
# The default lint level for `default` fields in dependencies that are defined
# as an object
workspace-default-features = "allow"
# The default lint level for `features` fields in dependencies that are defined
# as an object
external-default-features = "allow"

# List of crates that are allowed. Use with care!
allow = [
  #{ name = "ansi_term", version = "=0.11.0" },
]

# List of crates to deny
deny = [
  # Each entry can be either just the name of the crate...
  #{ name = "ansi_term" },
  # ... or a name and a version req
  #{ name = "ansi_term", version = "=0.11.0" },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
  #{ name = "ansi_term", version = "=0.11.0" },
]

# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, a skipped crate is removed from the dependency graph entirely and so
# will not be used when checking dependencies.
skip-tree = [
  #{ name = "ansi_term", version = "=0.11.0", depth = 20 },
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = []
